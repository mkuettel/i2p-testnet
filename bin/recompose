#!/usr/bin/env bash

set -eu -o pipefail
base_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
reseed_netdb_dir="${base_dir}/reseed-netDb"

getconf() {
    local attr="$1"
    jq ".$attr" < "$config_file" || (
        echo "ERROR: could not read configuration file" 1>&2
        exit 4
    )
}

display_help() {
    echo "Usage: recompose [-h] [-t] [config-file]"
    echo ""
    echo "  -h              Show this help screen"
    echo "  -t              Start the testnet with profile testing"
    echo "  config-file     The JSON configuration file to use to"
    echo "                  configure the testnet"
    echo "                  Default: config.json"
}

num_router_infos() {
    printf "%s\n" "$reseed_netdb_dir"/routerInfo*.dat | wc -l
}

collect_router_infos() {
    local amount="$(getconf 'nodes.amount')"

    # copy until we have a router info from every node
    while [ "$(num_router_infos)" -lt "$amount" ]; do
        for i in $(seq 1 "$amount"); do
            docker cp "${COMPOSE_PROJECT_NAME}_i2pd_$i":/home/i2pd/data/router.info "$reseed_netdb_dir"/routerInfo-"$i".dat || true
        done
    done

    touch "$reseed_netdb_dir"/.router-infos-collected
}


# Variables for command line arguments
test=0

OPTIND=1
while getopts "h?t" opt; do
    case "$opt" in
    h|\?)
        display_help
        exit 1
        ;;
    t)  test=1
        ;;
    # f)  output_file=$OPTARG
    #     ;;
    esac
done

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift
config_file="${1:-"$base_dir/config.json"}"


NETWORK_NAME="$(getconf network.name)"

if docker network list | grep -F "$NETWORK_NAME"; then
    echo "Removing network $NETWORK_NAME as it already exists."
    docker network rm "$NETWORK_NAME"
fi

COMPOSE_ARGS=("-f" "$base_dir"/docker/i2p-testnet.yml)

if [[ "$(getconf network.private)" != "true" ]]; then
    COMPOSE_ARGS+=("-f" "$base_dir/docker/publicnet.override.yml")
else
    COMPOSE_ARGS+=("-f" "$base_dir/docker/privatenet.override.yml")
fi

if [ "$test" -eq 1 ]; then
    export COMPOSE_PROFILES=test
fi

export COMPOSE_PROJECT_NAME=testnet
export NETWORK_NAME

if [[ "$(getconf network.private)" == "true" ]]; then
    # delete remains of previous run
    rm "$reseed_netdb_dir"/.router-infos-collected || true
    rm "$reseed_netdb_dir"/routerInfo-*.dat || true

    collect_router_infos &
fi

docker-compose "${COMPOSE_ARGS[@]}" \
    up --build \
    --remove-orphans \
    --force-recreate \
    --scale i2pd="$(getconf 'nodes.amount')" || \
    read -p "It seems something went wrong. Press enter to stop the testnet...." garbage

docker-compose "${COMPOSE_ARGS[@]}" down
